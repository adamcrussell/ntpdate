#!/usr/bin/perl
#
#  ntpdate 0.1.0
#
#  (c) 2004-2005 by Robert Scheck <ntpdate@robert-scheck.de>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc.,
#  59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#

use strict;
use IO::Socket;
use Time::HiRes qw(time);
use POSIX qw(strftime);
use Getopt::Long qw(:config no_ignore_case);
use Sys::Syslog;

my ($best, $clock, $help, $timeout, $query, $silent, $verbose, $version, $server, $ip);

my ($LocalTime0, $LocalTime0F, $LocalTime0H, $LocalTime0FH, $LocalTime0FB);
my ($LocalTime1, $LocalTime2, $LocalTime, $LocalTimeF, $LocalTimeT);
my ($NetTime, $NetTime2, $Netfraction);
my ($netround, $netdelay, $off);

my ($Byte1, $Stratum, $Poll, $Precision, $RootDelay, $RootDelayFB, $RootDisp, $RootDispFB, $ReferenceIdent, $ReferenceTime,
    $ReferenceTimeFB, $OriginateTime, $OriginateTimeFB, $ReceiveTime, $ReceiveTimeFB, $TransmitTime, $TransmitTimeFB);
my ($dummy, $RootDelayH, $RootDelayFH, $RootDispH, $RootDispFH, $ReferenceIdentT, $ReferenceTimeH, $ReferenceTimeFH, 
    $OriginateTimeH, $OriginateTimeFH, $ReceiveTimeH, $ReceiveTimeFH, $TransmitTimeH, $TransmitTimeFH);
my ($LI, $VN, $Mode, $sc, $PollT, $PrecisionV, $ReferenceT, $ReferenceIPv4);

# NTP message according to NTP/SNTP protocol specification
my $ntp_msg;

# Convert a binary string to fraction
sub bin2frac
{
  my @bin = split '', shift;
  my $frac = 0;

  while(@bin)
  {
    $frac = ($frac + pop @bin)/2;
  }

  $frac;
}

# Convert a fraction to binary string (B32)
sub frac2bin
{
  my $frac = shift;
  my $bin ="";

  while(length($bin) < 32)
  {
    $bin = $bin . int($frac*2);
    $frac = $frac*2 - int($frac*2);
  }

  $bin;
}

# Open the connection to the ntp server, prepare the ntp request packet,
# send and receive, take local timestamps before and after
sub get_ntp_time
{
  my ($remote);
  my ($rin, $rout, $eout) = "";
  my $ntp_msg;

  # Open the connection to the ntp server
  $remote = IO::Socket::INET -> new(Proto => "udp", PeerAddr => $server, PeerPort => 123, Timeout => $timeout)
                                  or do { show("No servers can be used, exiting"); };

  # Measure local time BEFORE timeserver query
  $LocalTime1 = time();

  # Convert fm unix epoch time to NTP timestamp
  $LocalTime0 = $LocalTime1 + 2208988800;

  # Prepare local timestamp for transmission in our request packet
  $LocalTime0F = $LocalTime0 - int($LocalTime0);
  $LocalTime0FB = frac2bin($LocalTime0F);
  $LocalTime0H = unpack("H8",(pack("N", int($LocalTime0))));
  $LocalTime0FH = unpack("H8",(pack("B32", $LocalTime0FB)));

  # LI=0, VN=3, Mode=3 (client), remainder msg is 12 nulls
  # and the local TxTimestamp derived from $LocalTime1
  $ntp_msg = pack("B8 C3 N10 B32", '00011011', (0)x12, int($LocalTime0), $LocalTime0FB);

  # Send the ntp-request to the server
  $remote -> send($ntp_msg) or return undef;
  vec($rin, fileno($remote), 1) = 1;
  select($rout=$rin, undef, $eout=$rin, $timeout) or do { show("No answer from $server"); };

  # Receive the ntp-message from the server
  $remote -> recv($ntp_msg, length($ntp_msg)) or do { show("Receive error from $server ($!)"); };

  # Measure local time AFTER timeserver query
  $LocalTime2 = time();

  $ntp_msg;
}

# Do some interpretations of the data
sub interpret_ntp_data
{
  my $ntp_msg = shift;

  # Unpack the received ntp-message into long integer and binary values
  ($Byte1, $Stratum, $Poll, $Precision, $RootDelay, $RootDelayFB, $RootDisp, $RootDispFB, $ReferenceIdent,
   $ReferenceTime, $ReferenceTimeFB, $OriginateTime, $OriginateTimeFB, $ReceiveTime, $ReceiveTimeFB, 
   $TransmitTime, $TransmitTimeFB) = unpack("a C3   n B16 n B16 H8   N B32 N B32   N B32 N B32", $ntp_msg);

  # Again unpack the received ntp-message into hex and ASCII values
  ($dummy, $dummy, $dummy, $dummy, $RootDelayH, $RootDelayFH, $RootDispH, $RootDispFH, $ReferenceIdentT,
   $ReferenceTimeH, $ReferenceTimeFH, $OriginateTimeH, $OriginateTimeFH, $ReceiveTimeH, $ReceiveTimeFH,
   $TransmitTimeH, $TransmitTimeFH) = unpack("a C3   H4 H4 H4 H4 a4   H8 H8 H8 H8   H8 H8 H8 H8", $ntp_msg);

  $LI = unpack("C", $Byte1 & "\xC0") >> 6;
  $VN = unpack("C", $Byte1 & "\x38") >> 3;
  $Mode = unpack("C", $Byte1 & "\x07");

  if($Stratum < 2)
  {
    $sc = $Stratum;
  }
  else
  {
    if($Stratum > 1)
    {
      if($Stratum < 16)
      {
        $sc = 2;
      }
      else
      {
        $sc = 16;
      }
    }
  }

  $PollT = 2**($Poll);

  if($Precision > 127)
  {
    $Precision = $Precision - 255;
  }

  $PrecisionV = sprintf("%1.4e",2**$Precision);
  $RootDelay += bin2frac($RootDelayFB);
  $RootDelay = sprintf("%.4f", $RootDelay);
  $RootDisp += bin2frac($RootDispFB);
  $RootDisp = sprintf("%.4f", $RootDisp);
  $ReferenceT = "";

  if($Stratum eq 1)
  {
    $ReferenceT = "[$ReferenceIdentT]";
  }
  else
  {
    if($Stratum eq 2)
    {
      if($VN eq 3)
      {
        $ReferenceIPv4 = sprintf("%d.%d.%d.%d", unpack("C4",$ReferenceIdentT));
        $ReferenceT = "[32bit IPv4 address $ReferenceIPv4 of the ref src]";
      }
      else
      {
        if($VN eq 4)
        {
          $ReferenceT = "[low 32bits of latest TX timestamp of reference src]";
        }
      }
    }
  }

  $ReferenceTime += bin2frac($ReferenceTimeFB);
  $OriginateTime += bin2frac($OriginateTimeFB);
  $ReceiveTime += bin2frac($ReceiveTimeFB);
  $TransmitTime += bin2frac($TransmitTimeFB);
}

# Convert time stamps to unix epoch and do some calculations on the time data
sub calculate_time_data
{
  my ($sec, $min, $hr, $dy, $mo, $yr);

  # Convert to unix epoch time stamp
  $ReferenceTime -= 2208988800;
  $OriginateTime -= 2208988800;
  $ReceiveTime -= 2208988800;
  $TransmitTime -= 2208988800;

  $NetTime = scalar(gmtime $TransmitTime);
  $Netfraction = sprintf("%03.f",1000*sprintf("%.3f", $TransmitTime - int($TransmitTime)));
  ($sec, $min, $hr, $dy, $mo, $yr) = gmtime($TransmitTime);
  $NetTime2 = sprintf("%04d-%02d-%02d %02d:%02d:%02d", $yr+1900, $mo+1, $dy, $hr, $min, $sec);

  # Calculate delay and difference
  $netround = sprintf("%+.5f", ($LocalTime1 - $LocalTime2));
  $netdelay = sprintf("%+.5f", (($LocalTime1 - $LocalTime2)/2) - ($TransmitTime - $ReceiveTime));
  $off = sprintf("%+.6f", (($ReceiveTime - $LocalTime1) + ($TransmitTime - $LocalTime2))/2);

  $LocalTime = ($LocalTime1 + $LocalTime2) /2;
  $LocalTimeF = sprintf("%03.f",1000*sprintf("%.3f", $LocalTime - int($LocalTime)));
  ($sec, $min, $hr, $dy, $mo, $yr) = gmtime($LocalTime);
  $LocalTimeT = sprintf("%04d-%02d-%02d %02d:%02d:%02d", $yr+1900, $mo+1, $dy, $hr, $min, $sec);
}

# Raw data from $ntp_msg, output the information we have
sub output_ntp_data
{
  my %LItext = ("0" => "no warning",
                "1" => "last minute of current day has 61 sec",
                "2" => "last minute of current day has 59 sec",
                "3" => "alarm condition (clock not synchronized)");

  my %Modetext = ("0" => "reserved",
                  "1" => "symmetric active",
                  "2" => "symmetric passive",
                  "3" => "client",
                  "4" => "server",
                  "5" => "broadcast",
                  "6" => "reserved for NTP control message",
                  "7" => "reserved for private use");

  my %Stratumtext = ("0" => "unspecified or unavailable",
                     "1" => "primary reference (e.g. radio clock)",
                     "2" => "2...15: secondary reference (via NTP or SNTP)",
                     "16" => "16...255: reserved");

  print "Local Transmit Timestp : " . $LocalTime0 . "\n";
  print "The ntp server $server [$ip] sent the following data:\n";
  print "Byte1                  : " . ord($Byte1) . "\n";
  print "  Leap Indicator (LI)  : $LI [" . $LItext{$LI} . "]\n";
  print "  Version number (VN)  : $VN [NTP/SNTP version number]\n";
  print "  Mode                 : $Mode [" . $Modetext{$Mode} . "]\n";
  print "Stratum                : $Stratum [" . $Stratumtext{$sc} . "]\n";
  print "Poll Interval          : $Poll [2**$Poll = $PollT sec max interval between successive msgs]\n";
  print "Clock Precision        : $Precision [2**$Precision = $PrecisionV]\n";
  print "Root Delay             : $RootDelayH$RootDelayFH [$RootDelay sec]\n";
  print "Root Dispersion        : $RootDispH$RootDispFH [$RootDisp sec]\n";
  print "Reference Identifier   : $ReferenceIdent $ReferenceT \n";
  print "Reference Timestamp    : $ReferenceTimeH.$ReferenceTimeFH [" . sprintf("%10.5f",$ReferenceTime) . "]\n";
  print "Originate Timestamp    : $OriginateTimeH.$OriginateTimeFH [" . sprintf("%10.5f",$OriginateTime) . "]\n";
  print "Receive Timestamp      : $ReceiveTimeH.$ReceiveTimeFH [" . sprintf("%10.5f",$ReceiveTime) . "]\n";
  print "Transmit Timestamp     : $TransmitTimeH.$TransmitTimeFH [" . sprintf("%10.5f",$TransmitTime) . "]\n\n";
}

# Interpreted time data output the information we have
sub output_ntp_data2
{
  print "Interpreted results, converted to unix epoch (sec since 1970-01-01 00:00:00):\n";
  print "Reference Timestamp    : " . sprintf("%10.5f",$ReferenceTime) . " [last sync of server clock with ref]\n";
  print "Originate Timestamp    : " . sprintf("%10.5f",$OriginateTime) . " [returned Local Transmit Timestamp]\n";
  print "Receive Timestamp      : " . sprintf("%10.5f",$ReceiveTime) . " [request packet arrived at server]\n";
  print "Transmit Timestamp     : " . sprintf("%10.5f",$TransmitTime) . " [this reply departed the server]\n";
  print "Net time UTC           : $NetTime +$Netfraction ms\n";
  print "                         $NetTime2.$Netfraction\n";

  # Delay and difference
  print "Network roundtrip time : $netround sec";

  if(abs($netround) > 1)
  {
    print " <-- high roundtrip time, try another server closer to you";
  }
  print "\n";

  print "Network delay          : $netdelay sec";

  if(abs($netdelay) > 1)
  {
    print " <-- high delay time, try another server closer to you";
  }
  print "\n";

  print "Local Timestamp        : $LocalTime \n";
  print "Local time UTC         : $LocalTimeT.$LocalTimeF\n";

  # The final result: the difference report
  print "Clock Difference       : $off sec off between $server and local";

  if(abs($off) > 11000)
  {
    print " <-- check this!";
  }
  print "\n";

  print "Set local system clock : " 
}

# Set the unix clock to the nearest second
sub correct_localclock
{
  my $silent = "";
  $silent = ">> /dev/null" if $verbose == 0;

  my $off = shift;
  $off = sprintf("%.f", $off);

  system("/bin/date --set=\'$off seconds\' $silent");
  sleep(1) if $best == 1;
}

sub show
{
  my $text = shift;

  if($silent == 1)
  {
    openlog("ntpdate", 'cons,pid', 'info');
    syslog('info', $text);
    closelog();
  }
  else
  {
    if($verbose == 0)
    {
      print strftime("%e %b %H:%M:%S", localtime()) . " ntpdate[$$]: ";
    }
    print $text . "\n";
  }

  exit;
}

GetOptions("b|best!"=>\$best,
           "c|clock!"=>\$clock,
           "h|help!"=>\$help,
           "t|timeout=i"=>\$timeout,
           "q|query"=>\$query,
           "s|silent!"=>\$silent,
           "v|vv|vvv!"=>\$verbose,
           "V|version!"=>\$version) or exit;

if($version == 1)
{
  print "Version!\n";
  exit;
}

if($help == 1 or $#ARGV != 0)
{
  print "usage: /usr/sbin/ntpdate [-bchqsvV] [-t timeout] server\n";
  exit;
}

if($best == 1 and $< != 0)
{
  print "Option -b requires root privileges\n";
  exit;
}

if($clock == 1 and $< != 0)
{
  print "Option -c requires root privileges\n";
  exit;
}

if($clock == 1 and $query == 1)
{
  print "Options -c and -q can't be used together\n";
  exit;
}

if($verbose == 1 and $best == 1)
{
  print "Options -b and -v can't be used together\n";
  exit;
}

if($verbose == 1 and $silent == 1)
{
  print "Options -s and -v can't be used together\n";
  exit;
}

if($silent == 1 and $query == 1)
{
   print "Options -q and -s can't be used together\n";
   exit;
}

$timeout = 2 if !defined $timeout;
$server = $ARGV[0];

if(gethostbyname($server))
{
  $ip = sprintf("%d.%d.%d.%d", unpack("C4",gethostbyname($server)));
}
elsif($server =~ /:/)
{
  show("No IPv6 support available");
}
else
{
  show("Can't find host $server");
}

print "Connecting to $server...\n" if $verbose == 1;

do
{
  $off = 0;
  $ntp_msg = get_ntp_time;
  interpret_ntp_data($ntp_msg);

  # Check if the received packet is the correct reply to our request:
  # it is correct, if our original transmit time we sent in the Transmit Time field
  # of our request packet shows up in the Originate Time field of the received reply.
  if(($LocalTime0H . $LocalTime0FH) ne ($OriginateTimeH . $OriginateTimeFH))
  {
    if($verbose == 1)
    {
      print "*** The received reply seems to be faulty and NOT the reply to our request packet:\n";
      print "*** The OriginateTime stamp $OriginateTimeH.$OriginateTimeFH of the received packet does not\n";
      print "*** show our Transmit Time $LocalTime0H.$LocalTime0FH.\n";
      exit;
    }
    else
    {
      show("Time server $ip sent a faulty time reply");
    }
  }

  # Raw data from $ntp_msg
  output_ntp_data() if $verbose == 1;

  # Calculate the time data
  calculate_time_data();

  # Interpreted and calculated time data
  output_ntp_data2() if $verbose == 1;

  if($query == 1)
  {
    if($verbose == 1)
    {
      print "Only query, no clock change(s)\n";
    }
    elsif($silent == 0)
    {
      print "server $ip, stratum $Stratum, offset $off, delay $netdelay\n";
    }
  }
  else
  {
    if($< == 0)
    {
      correct_localclock($off);
    }
    else
    {
      show("Permission denied, root privileges required");
    }
  }

  if((($off >= -0.128 and $off <= +0.128) and $best == 1) or $best == 0)
  {
    system("/sbin/hwclock --systohc") if $clock == 1;
    show("Adjust time server $ip offset $off sec") if $verbose == 0;
  }
}
while(($off < -0.128 or $off > +0.128) and $best == 1);
